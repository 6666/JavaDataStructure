<mxfile host="Electron" modified="2024-02-11T16:54:38.084Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/23.0.2 Chrome/120.0.6099.109 Electron/28.1.0 Safari/537.36" etag="yGXCsi7Jp9STl_5S9IE5" version="23.0.2" type="device">
  <diagram name="Page-1" id="FjJnc4ERKA3xFAGljLbT">
    <mxGraphModel dx="1165" dy="626" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="2tKspfGgeF-UysoxU9-N-1" value="&lt;span style=&quot;background-color:#ffffff;padding:0px 0px 0px 2px;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-family: Consolas; font-size: 10pt;&quot;&gt;&lt;span style=&quot;color:#7f0055;font-weight:bold;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#7f0055;font-weight:bold;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#000000;background-color:#d4d4d4;&quot;&gt;Properties&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#7f0055;font-weight:bold;&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; Hashtable&amp;lt;Object,Object&amp;gt; {&lt;br&gt;&lt;br&gt;1) It is Synchronized&lt;br&gt;2) Random Access&lt;br&gt;3) By default not sorted&lt;br&gt;4) Insertion and deletion is faster&lt;br&gt;5) It is not cloneable&lt;br&gt;6) it is not Searializable&lt;br&gt;7) It is used to read the file entry and keep loaded in the form of kay value pair&lt;br&gt;}&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="10" y="10" width="840" height="180" as="geometry" />
        </mxCell>
        <mxCell id="2tKspfGgeF-UysoxU9-N-2" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" edge="1" parent="1" source="2tKspfGgeF-UysoxU9-N-1" target="2tKspfGgeF-UysoxU9-N-1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="2tKspfGgeF-UysoxU9-N-3" value="&lt;div style=&quot;background-color:#ffffff;padding:0px 0px 0px 2px;&quot;&gt;&lt;div style=&quot;color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-family: Consolas; font-size: 10pt;&quot;&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;font-size: 10pt; color: rgb(127, 0, 85); font-weight: bold;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 10pt; color: rgb(127, 0, 85); font-weight: bold;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; Hashtable&amp;lt;K,V&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 10pt; color: rgb(127, 0, 85); font-weight: bold;&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 10pt; background-color: rgb(212, 212, 212);&quot;&gt;Dictionary&amp;lt;K,V&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 10pt; color: rgb(127, 0, 85); font-weight: bold;&quot;&gt;implements&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; Map&amp;lt;K,V&amp;gt;, Cloneable, java.io.Serializable {&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;1) It is Synchronized&lt;br style=&quot;border-color: var(--border-color); font-size: 13.3333px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;2) Random Access&lt;/span&gt;&lt;br style=&quot;border-color: var(--border-color); font-size: 13.3333px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;3) By default not sorted&lt;/span&gt;&lt;br style=&quot;border-color: var(--border-color); font-size: 13.3333px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;4) Insertion and deletion is faster&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;&lt;span style=&quot;border-color: var(--border-color); font-size: 10pt;&quot;&gt;6) Time Complexity is O(1)&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;&lt;span style=&quot;border-color: var(--border-color); font-size: 10pt;&quot;&gt;7) Internally using equals() and hashCode() to compare to maintian the unique hashing&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="10" y="180" width="830" height="190" as="geometry" />
        </mxCell>
        <mxCell id="2tKspfGgeF-UysoxU9-N-4" value="&lt;div style=&quot;background-color:#ffffff;padding:0px 0px 0px 2px;&quot;&gt;&lt;div style=&quot;color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-family: Consolas; font-size: 10pt;&quot;&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#7f0055;font-weight:bold;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#7f0055;font-weight:bold;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; LinkedHashMap&amp;lt;K,V&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 10pt; color: rgb(127, 0, 85); font-weight: bold;&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; HashMap&amp;lt;K,V&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 10pt; color: rgb(127, 0, 85); font-weight: bold;&quot;&gt;implements&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; Map&amp;lt;K,V&amp;gt; {&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;div style=&quot;padding: 0px 0px 0px 2px;&quot;&gt;&lt;div style=&quot;font-size: 10pt;&quot;&gt;&lt;p style=&quot;margin:0;&quot;&gt; * &lt;span style=&quot;color:#7f7f9f;&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt;This implementation spares its clients from the unspecified, generally&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt; * chaotic ordering provided by &lt;/span&gt;&lt;span style=&quot;color:#3f3fbf;&quot;&gt;{@link HashMap}&lt;/span&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt; (and &lt;/span&gt;&lt;span style=&quot;color:#3f3fbf;&quot;&gt;{@link Hashtable}&lt;/span&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt;),&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt; * without incurring the increased cost associated with &lt;/span&gt;&lt;span style=&quot;color:#3f3fbf;&quot;&gt;{@link TreeMap}&lt;/span&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt;.  It&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt; * can be used to produce a copy of a map that has the same order as the&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt; * original, regardless of the original map&#39;s implementation:&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#7f7f9f;&quot;&gt;&amp;lt;pre&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt;{@code&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt; *     void foo(Map&amp;lt;String, Integer&amp;gt; m) {&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt; *         Map&amp;lt;String, Integer&amp;gt; copy = new LinkedHashMap&amp;lt;&amp;gt;(m);&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt; *         ...&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt; *     }&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt; * }&lt;/span&gt;&lt;span style=&quot;color:#7f7f9f;&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt; * This technique is particularly useful if a module takes a map on input,&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt; * copies it, and later returns results whose order is determined by that of&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt; * the copy.  (Clients generally appreciate having things returned in the same&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#3f5fbf;&quot;&gt; * order they were presented.)&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="10" y="330" width="830" height="150" as="geometry" />
        </mxCell>
        <mxCell id="2tKspfGgeF-UysoxU9-N-5" value="&lt;div style=&quot;background-color:#ffffff;padding:0px 0px 0px 2px;&quot;&gt;&lt;div style=&quot;color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-family: Consolas; font-size: 10pt;&quot;&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#7f0055;font-weight:bold;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#7f0055;font-weight:bold;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#000000;background-color:#d4d4d4;&quot;&gt;HashMap&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;&amp;lt;K,V&amp;gt; &lt;/span&gt;&lt;span style=&quot;color:#7f0055;font-weight:bold;&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; AbstractMap&amp;lt;K,V&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 10pt; color: rgb(127, 0, 85); font-weight: bold;&quot;&gt;implements&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; Map&amp;lt;K,V&amp;gt;, Cloneable, Serializable {&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;1) Not Synchronized&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;&lt;span style=&quot;border-color: var(--border-color); font-size: 10pt;&quot;&gt;2) Internally using HashMap&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;&lt;span style=&quot;border-color: var(--border-color); font-size: 10pt;&quot;&gt;3) Random Access&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;&lt;span style=&quot;border-color: var(--border-color); font-size: 10pt;&quot;&gt;4) By default not sorted&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;&lt;span style=&quot;border-color: var(--border-color); font-size: 10pt;&quot;&gt;5) Insertion and deletion is faster&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;&lt;span style=&quot;border-color: var(--border-color); font-size: 10pt;&quot;&gt;6) Time Complexity is O(1)&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;&lt;span style=&quot;border-color: var(--border-color); font-size: 10pt;&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="10" y="640" width="830" height="150" as="geometry" />
        </mxCell>
        <mxCell id="2tKspfGgeF-UysoxU9-N-6" value="&lt;div style=&quot;background-color:#ffffff;padding:0px 0px 0px 2px;&quot;&gt;&lt;div style=&quot;color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-family: Consolas; font-size: 10pt;&quot;&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;color:#7f0055;font-weight:bold;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#7f0055;font-weight:bold;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt; TreeMap&amp;lt;K,V&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 10pt; color: rgb(127, 0, 85); font-weight: bold;&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; AbstractMap&amp;lt;K,V&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 10pt; color: rgb(127, 0, 85); font-weight: bold;&quot;&gt;implements&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 10pt; background-color: rgb(212, 212, 212);&quot;&gt;NavigableMap&amp;lt;K,V&amp;gt;&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;, Cloneable, java.io.Serializable&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;1) Not Synchronized&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;2) Internally using Treemap&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;&lt;span style=&quot;border-color: var(--border-color); font-size: 10pt;&quot;&gt;3) Random Access&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;&lt;span style=&quot;border-color: var(--border-color); font-size: 10pt;&quot;&gt;4) By default sorted&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;&lt;span style=&quot;border-color: var(--border-color); font-size: 10pt;&quot;&gt;5) Insertion and deletion is slower than the HashMap&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;&lt;span style=&quot;border-color: var(--border-color); font-size: 10pt;&quot;&gt;6) Time Complexity is O(log(n))&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;border-color: var(--border-color); font-size: 13.3333px; margin: 0px;&quot;&gt;&lt;span style=&quot;border-color: var(--border-color); font-size: 10pt;&quot;&gt;7) Internally using equals(), hashCode() , Comparator, compare() and compareto() to maintian the by defualt ascending order&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin:0;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="10" y="800" width="830" height="220" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
